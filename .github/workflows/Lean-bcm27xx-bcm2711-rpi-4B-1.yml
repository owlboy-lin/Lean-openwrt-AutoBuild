#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Lean-bcm27xx-bcm2711-rpi-4-1

on:
#  schedule:
#    - cron: 0 20 * * *

  release:
    types: [published]
 
  watch:
    types: [started]

  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: Lean-bcm27xx-bcm2711-rpi-4.info
  Firmware_Name: Lean-bcm27xx-bcm2711-rpi-4
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:


  build_openwrt:

        
    name: Lean-bcm27xx-bcm2711-rpi-4-1
        
    # if: github.event.repository.owner.id == github.event.sender.id
        
    runs-on: ubuntu-latest


    steps:
      # - name: CPU检测
      #   run: |
      #     echo "警告⚠"
      #     echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
      #     echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
      #     echo "--------------------------CPU信息--------------------------"
      #     echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
      #     echo "CPU核心数量: $(nproc)"
      #     echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
      #     echo "--------------------------内存信息--------------------------"
      #     echo "已安装内存详细信息:"
      #     echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
      #     echo "--------------------------硬盘信息--------------------------"
      #     echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: 准备完成
        uses: actions/checkout@v4
            
      - name: 初始化系统环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir 

            
      - name: 更新时区、编译时间
        id: date
        run: |
          sudo timedatectl set-timezone "$TZ"
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
          echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
          echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
          echo "编译开始时间..."
          START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
          echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV
            
           
      - name: 下载源代码
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Cache
        uses: stupidloud/cachewrtbuild@main
        with:
          ccache: 'true'
          mixkey: ${{ matrix.target }}
          clean: ${{ contains(github.event.action, 'nocache') }}
          prefix: ${{ github.workspace }}/openwrt
            
      # - name: Free up disk space
      #   env:
      #     DEBIAN_FRONTEND: noninteractive
      #   run: |
      #     sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/bin /mnt/openwrt/staging_dir
      #     ln -sf /mnt/openwrt/dl openwrt/dl
      #     ln -sf /mnt/openwrt/bin openwrt/bin
      #     ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir

      - name: patch1补丁和自定义设置
        if: (!cancelled())
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}  

      - name: Update feeds
        working-directory: ./openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          ./scripts/feeds install -a

      # - name: Custom script
      #   run: |
      #     mv rpi-4B/rpi-4B.sh openwrt/rpi-4B.sh
      #     cd openwrt
      #     chmod +x ./rpi-4B.sh && ./rpi-4B.sh

      - name: Costom configure file
        env:
          CONFIG_FILE: rpi-4B/config.rpi-4B
        run: |
          rm -f openwrt/.config*
          mv $CONFIG_FILE openwrt/.config
          cd openwrt
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: patch2补丁和自定义设置
        if: (!cancelled())
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}  
            
      - name: 下载固件包
        id: package
        run: |
          cd openwrt
          make download -j$(($(nproc)+1))
          # find dl -size -1024c -exec ls -l {} \;
          # find dl -size -1024c -exec rm -f {} \;

      # - name: Check space usage
      #   run: |
      #     shopt -s extglob
      #     cd openwrt
      #     if [[ -f staging_dir/*${{ env.MTARGET }}*/bin ]]; then
      #         rm -rf staging_dir/!(*${{ env.MTARGET }}*|host|hostpkg) build_dir/!(*${{ env.MTARGET }}*|host|hostpkg)
      #     fi
      #     df -hT  

      # - name: 输出编译信息
      #   run: |
      #     cd openwrt
      #     echo " 系统空间      类型   总数  已用  可用 使用率"
      #     df -hT $PWD
           
      #     echo
      #     echo "=========================================="
      #     echo

      #     ZZZ="package/lean/default-settings/files/zzz-default-settings"
      #     echo "DISTRIB_REVISION=$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')" >> $GITHUB_ENV
      #     echo "KERNEL_PATCHVER=$(cat target/linux/x86/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')" >> $GITHUB_ENV
      #     echo "	    当前编译版本：$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')"
      #     echo "	    内核版本：$(cat target/linux/x86/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')"

      #     echo
      #     echo "=========================================="

      #     grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
      #     grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
      #     sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
      #     sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
      #     sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1 #排除 luci-app-passwall_Transparent_Proxy
      #     sed -i '/qbittorrent-simple_dynamic/d' Plug-in > /dev/null 2>&1 #排除 luci-app-qbittorrent-simple_dynamic
      #     sed -i 's/=y/\ /g' Plug-in
      #     awk '$0=NR$0' Plug-in > Plug-2
      #     awk '{print "	" $0}' Plug-2 > Plug-in

      #     echo
      #     echo
      #     echo "	      已选插件列表"
      #     cat Plug-in
      #     rm -rf {Plug-in,Plug-2}

      #     echo
      #     echo "=========================================="

      #     echo
      #     echo
      #     echo "输出完整插件信息..."
      #     echo
      #     echo
      #     cat .config
        
      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Compile firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
      - name: Check space usage
        if: cancelled()
        run: df -hT

      - name: 整理固件文件
        id: organize
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |  
          cd openwrt/bin/targets/*/*
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Prepare artifact
        run: |
          cd openwrt
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          cp -rf ./.config ./artifact/buildinfo/
          cp -rf ./feeds.conf.default ./artifact/buildinfo/   
          cd ./artifact
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT      
    
      - name: Upload bin directory
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

        
      - name: Upload firmware directory
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && steps.organize.outputs.status == 'success'
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_firmware_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}/firmware/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && steps.organize.outputs.status == 'success'
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_buildinfo${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && steps.organize.outputs.status == 'success'
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_package${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/artifact/package/

      - name: Upload firmware to cowtransfer
        id: cowtransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 30
          keep_minimum_runs: 6

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

